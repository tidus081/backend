# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import preModel_pb2 as preModel__pb2


class GreeterStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.pass_data = channel.unary_unary(
        '/Greeter/pass_data',
        request_serializer=preModel__pb2.gRequest.SerializeToString,
        response_deserializer=preModel__pb2.gReply.FromString,
        )
    self.upload_object = channel.stream_unary(
        '/Greeter/upload_object',
        request_serializer=preModel__pb2.fileReply.SerializeToString,
        response_deserializer=preModel__pb2.gReply.FromString,
        )
    self.download_csv = channel.unary_stream(
        '/Greeter/download_csv',
        request_serializer=preModel__pb2.gRequest.SerializeToString,
        response_deserializer=preModel__pb2.fileReply.FromString,
        )
    self.download_object = channel.unary_stream(
        '/Greeter/download_object',
        request_serializer=preModel__pb2.gRequest.SerializeToString,
        response_deserializer=preModel__pb2.fileReply.FromString,
        )
    self.build_model = channel.unary_unary(
        '/Greeter/build_model',
        request_serializer=preModel__pb2.gRequest.SerializeToString,
        response_deserializer=preModel__pb2.gReply.FromString,
        )
    self.predict = channel.unary_unary(
        '/Greeter/predict',
        request_serializer=preModel__pb2.gRequest.SerializeToString,
        response_deserializer=preModel__pb2.gReply.FromString,
        )
    self.anomaly = channel.unary_unary(
        '/Greeter/anomaly',
        request_serializer=preModel__pb2.gRequest.SerializeToString,
        response_deserializer=preModel__pb2.gReply.FromString,
        )
    self.vectorize = channel.unary_unary(
        '/Greeter/vectorize',
        request_serializer=preModel__pb2.gReply.SerializeToString,
        response_deserializer=preModel__pb2.gReply.FromString,
        )


class GreeterServicer(object):
  """The greeting service definition.
  """

  def pass_data(self, request, context):
    """basic request and receive
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def upload_object(self, request_iterator, context):
    """data from flask ins
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def download_csv(self, request, context):
    """model, predict, anomaly from model ins
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def download_object(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def build_model(self, request, context):
    """request grpc to model instance from flask
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def predict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def anomaly(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def vectorize(self, request, context):
    """vectorization
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'pass_data': grpc.unary_unary_rpc_method_handler(
          servicer.pass_data,
          request_deserializer=preModel__pb2.gRequest.FromString,
          response_serializer=preModel__pb2.gReply.SerializeToString,
      ),
      'upload_object': grpc.stream_unary_rpc_method_handler(
          servicer.upload_object,
          request_deserializer=preModel__pb2.fileReply.FromString,
          response_serializer=preModel__pb2.gReply.SerializeToString,
      ),
      'download_csv': grpc.unary_stream_rpc_method_handler(
          servicer.download_csv,
          request_deserializer=preModel__pb2.gRequest.FromString,
          response_serializer=preModel__pb2.fileReply.SerializeToString,
      ),
      'download_object': grpc.unary_stream_rpc_method_handler(
          servicer.download_object,
          request_deserializer=preModel__pb2.gRequest.FromString,
          response_serializer=preModel__pb2.fileReply.SerializeToString,
      ),
      'build_model': grpc.unary_unary_rpc_method_handler(
          servicer.build_model,
          request_deserializer=preModel__pb2.gRequest.FromString,
          response_serializer=preModel__pb2.gReply.SerializeToString,
      ),
      'predict': grpc.unary_unary_rpc_method_handler(
          servicer.predict,
          request_deserializer=preModel__pb2.gRequest.FromString,
          response_serializer=preModel__pb2.gReply.SerializeToString,
      ),
      'anomaly': grpc.unary_unary_rpc_method_handler(
          servicer.anomaly,
          request_deserializer=preModel__pb2.gRequest.FromString,
          response_serializer=preModel__pb2.gReply.SerializeToString,
      ),
      'vectorize': grpc.unary_unary_rpc_method_handler(
          servicer.vectorize,
          request_deserializer=preModel__pb2.gReply.FromString,
          response_serializer=preModel__pb2.gReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Greeter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
